#! /bin/bash
root=$PWD

################# settings for script #################
setScript(){
    specDir="/home/zhouyuchen/spec2006"
    # root directory path for spec2006
    gem5Dir="/home/zhouyuchen/work_space/gem5-with-chinese-comment/"
    # root directory path for gem5
    tempDir="/home/zhouyuchen/work_space/output/gem5_multithread"
    # Where the temporary files should be stored
    ISA="X86"
    # [ARM ALPHA RISCV X86 MIPS]
    optLevel="peak"
    # [base(O2) peak(O3)]
    buildDir="build_${optLevel}_`echo $ISA | tr 'A-Z' 'a-z'`.0001"
    buildDir=`echo $buildDir | sed 's/x86/amd64/g'`
    # [build_base_riscv.0001, build_base_arm.0001, build_base_alpha.0001,
    #  build_base_mips.0001, build_base_amd64.0001]
    runDir="run_base_TESTSET_amd64.0001"
    # Do not change this
    threads=`lscpu | awk '/^CPU\(s\):/{print $2}'`
    # num of threads you want to use when building gem5.opt
    testSet="test" # [ref test train]
    # Test_set setting
    runSpecSuites="Yes" # [Yes/No]
    # Decide if you want to run all the tests in the given testSet
    useDiff="Yes" #[Yes/No]
    # If you want to enable stdout-diff after spec test(s)
    # Attention: stderr and stdout will be redirected if diff is enabled!
    diffTool="specdiff" # [specdiff diff md5sum]
    # The tool used for diff
    bad_spec=""
    # Spec programs that may have problems
    timingMode="Yes" #[Yes/No]
    # Decide if we shall print time-info for running
}

################# settings for gem5 #################
setGem5(){
    # build options
    buildModel="opt" # [fast debug opt]
    # Gem5 building mode
    cpuModel="all" # [AtomicSimpleCPU CheckerCPU MinorCPU O3CPU TimingSimpleCPU all no]
    # CPU Model you want to build into gem5.opt/fast/debug
    forceNotBuild="Yes" # [Yes/No] 
    # Set this to Yes to force this script not to build gem5 
    m5outDir=""
    # m5outDir option [default m5out]

    enableSmt="No" # [Yes/No]
    enableSimpoint="No" # [Yes/No]
    enableCountAsInstruction="Yes" # [Yes/No]
    # Whether we should take the number as instruction count
    # for the following two options.

    enableGlobal="Yes" # [Yes]
        cpuType="AtomicSimpleCPU" # [TimingSimpleCPU AtomicSimpleCPU DerivO3CPU MinorCPU]
        # type of cpu to run with
        cpuVoltage="" # []
        # Top-level voltage for blocks running at system power supply
        sysClock="" # []
        # Top-level clock for blocks running at system speed
        cpuClock="" # []
        # Clock for blocks running at CPU speed
        fastForwardInsts="" # []
        # number of instruction put into warm up region
        warmupInsts= #"600000" # []
        # warmup period in total instructions
        maxInsts= #"50000000" # []
        # max number of instructions will be run
        maxTime="" # []
        # Run to the specified absolute simulated time in seconds
        numCpus="8" # []
        # number of cpu you want to run with

    enableMem="Yes"
        numDirs=""
        memType="SimpleMemory" 
        # ['HBM_1000_4H_1x128', 'DRAMCtrl', 'DDR3_2133_8x8', 'HBM_1000_4H_1x64',
        # 'GDDR5_4000_2x32', 'HMC_2500_1x32', 'LPDDR3_1600_1x32', 'WideIO_200_1x128', 
        # 'DDR4_2400_8x8', 'DDR3_1600_8x8', 'DDR4_2400_4x16', 'DDR4_2400_16x4', 
        # 'SimpleMemory', 'LPDDR2_S4_1066_1x32']
        # type of memory to use
        memChannels=""
        # number of memory channels
        memRanks=""
        # number of memory ranks per channel
        memSize="2GB"
        # Specify the physical memory size (single memory)

    enableRuby="No"
        rubyTopology="MeshDirCorners_XY" # [Mesh_XY Cluster CrossBar CrossbarGarnet
        # MeshDirCorners_XY Mesh_westfirst Pt2Pt]
        rubyMeshRows="4"  # old is 4 zyc
        # How many cpu connected in one row (Used in Mesh_XY)
        rubyNetwork="simple" #[simple garnet2.0]

    enableCache="No"
        numDirs=""
        cacheLineSize=""
        L1Dsize="32kB"
        L1Dassoc="4"
        #L1Dprefetcher="StridePrefetcher"
        # Prefetcher used for L1DCache
        # Following prefetchers are available
        # [TaggedPrefetcher, BOPPrefetcher, STeMSPrefetcher
        #  IrregularStreamBufferPrefetcher, DCPTPrefetcher, MultiPrefetcher
	    #  SBOOEPrefetcher, IndirectMemoryPrefetcher, SignaturePathPrefetcher
	    #  SignaturePathPrefetcherV2, PIFPrefetcher, SlimAMPMPrefetcher
	    #  AMPMPrefetcher, StridePrefetcher]
        L1Isize="64kB"
        L1Iassoc="4"
        #L1Iprefetcher="StridePrefetcher"

    enableL2Cache="No"
        numL2Caches=""
        L2size="256kB"
        L2assoc="8"
        #L2prefetcher="StridePrefetcher"

    enableL3Cache="No"
        numL3Caches=""
        L3size="8MB"
        L3assoc="16"
        #L3prefetcher="StridePrefetcher"

    enableSWCache="No" # [Yes/No]
        numCpuPerGroup=2

    enableDebug="No" # [Yes/No]
        debugOutputDir="$gem5Dir"
        debugFlags="Fetch" #
        # [Flag1,Flag2] use "-h gem5 --debug-help" to see the debug flags 
        debugStartTick=""
        debugEndTick=""

    enableCheckPoint="No" # [Yes/No]
        loadCheckPointPos= #"248554000"
        # num of instructions already run to load checkpoint
        saveCheckPointPos="250000000"
        # num of instructions to take checkpoint
        checkPointDir="$gem5Dir/check_points/$numCpus/"
        # where to put or load the checkpoint file
}

################# settings for spec #################
setSpec(){
    upperSuiteID=10
    # The largest suite ID for subtest
    
    # Following setting are set with format like
    # (ExecName OutputFileList Arguments StdinFile)
    # If an option is null, it must be set to "" but not empty
    
    # 400
    perlbench_ref_0=(perlbench "checkspam.2500.5.25.11.150.1.1.1.1.out" "-I./lib checkspam.pl 2500 5 25 11 150 1 1 1 1")
    perlbench_ref_1=(perlbench "diffmail.4.800.10.17.19.300.out" "-I./lib diffmail.pl 4 800 10 17 19 300")
    perlbench_ref_2=(perlbench "splitmail.1600.12.26.16.4500.out" "-I./lib splitmail.pl 1600 12 26 16 4500")
    perlbench_ref_single=0
    perlbench_train_0=(perlbench "diffmail.2.550.15.24.23.100.out" "-I./lib diffmail.pl 2 550 15 24 23 100")
    perlbench_train_1=(perlbench "perfect.b.3.out" "-I./lib perfect.pl b 3")
    perlbench_train_2=(perlbench "scrabbl.out" "-I./lib scrabbl.pl")
    perlbench_train_3=(perlbench "splitmail.535.13.25.24.1091.out" "-I./lib splitmail.pl 535 13 25 24 1091")
    perlbench_train_4=(perlbench "suns.out" "-I./lib suns.pl")
    perlbench_train_single=0
    perlbench_test_0=(perlbench "attrs.out" "-I./lib attrs.pl")
    perlbench_test_1=(perlbench "gv.out" "-I./lib gv.pl")
    perlbench_test_2=(perlbench "makerand.out" "-I./lib makerand.pl")
    perlbench_test_3=(perlbench "pack.out" "-I./lib pack.pl")
    perlbench_test_4=(perlbench "redef.out" "-I./lib redef.pl")
    perlbench_test_5=(perlbench "ref.out" "-I./lib ref.pl")
    perlbench_test_6=(perlbench "regmesg.out" "-I./lib regmesg.pl")
    perlbench_test_7=(perlbench "append.out cmdopt.out fh.out range.out sub_lval.out args.out cmp.out grep.out method.out recurse.out subst.out arith.out comp_term.out my.out subst_amp.out array.out concat.out hashwarn.out nothr5005.out subst_wamp.out context.out if.out oct.out regexp.out tr.out auto.out decl.out inc.out op_cond.out regexp_noamp.out undef.out base_cond.out defins.out index.out op_pat.out unshift.out base_pat.out delete.out int.out ord.out repeat.out vec.out base_term.out die.out join.out override.out reverse.out wantarray.out bless.out do.out length.out rs.out bop.out each.out lex.out package.out sleep.out bproto.out eval.out list.out pos.out sort.out chars.out exists_sub.out loopctl.out push.out splice.out chop.out exp.out lop.out quotemeta.out study.out" "-I./lib test.pl")
    perlbench_test_single=4

    # 401
    bzip2_ref_0=(bzip2 "chicken.jpg.out" "chicken.jpg 30")
    bzip2_ref_1=(bzip2 "input.source.out" "input.source 280") 
    bzip2_ref_2=(bzip2 "liberty.jpg.out" "liberty.jpg 30")
    bzip2_ref_3=(bzip2 "input.program.out" "input.program 280")
    bzip2_ref_4=(bzip2 "text.html.out" "text.html 280")
    bzip2_ref_5=(bzip2 "input.combined.out" "input.combined 200")
    bzip2_ref_single=0
    bzip2_train_0=(bzip2 "input.program.out" "input.program 10")
    bzip2_train_1=(bzip2 "byoudoin.jpg.out" "byoudoin.jpg 5")
    bzip2_train_2=(bzip2 "input.combined.out" "input.combined 80")
    bzip2_train_single=0
    bzip2_test_0=(bzip2 "input.program.out" "input.program 5")
    bzip2_test_1=(bzip2 "dryer.jpg.out" "dryer.jpg 2")
    bzip2_test_single=0

    # 403
    gcc_ref_0=(gcc "166.s" "166.i -o 166.s")
    gcc_ref_1=(gcc "200.s" "200.i -o 200.s")
    gcc_ref_2=(gcc "c-typeck.s" "c-typeck.i -o c-typeck.s")
    gcc_ref_3=(gcc "cp-decl.s" "cp-decl.i -o cp-decl.s")
    gcc_ref_4=(gcc "expr.s" "expr.i -o expr.s")
    gcc_ref_5=(gcc "expr2.s" "expr2.i -o expr2.s")
    gcc_ref_6=(gcc "g23.s" "g23.i -o g23.s")
    gcc_ref_7=(gcc "s04.s" "s04.i -o s04.s")
    gcc_ref_8=(gcc "scilab.s" "scilab.i -o scilab.s")
    gcc_ref_single=0
    gcc_train_0=(gcc "integrate.s" "integrate.i -o integrate.s")
    gcc_test_0=(gcc "cccp.s" "cccp.i -o cccp.s")

    # 410
    bwaves_ref_0=(bwaves "bwaves.out bwaves2.out bwaves3.out")
    bwaves_train_0=(bwaves "bwaves.out bwaves2.out bwaves3.out")
    bwaves_test_0=(bwaves "bwaves.out bwaves2.out bwaves3.out")

    # 416
    gamess_ref_0=(gamess "cytosine.2.out" "" "cytosine.2.config")
    gamess_ref_1=(gamess "h2ocu2+.gradient.out" "" "h2ocu2+.gradient.config")
    gamess_ref_2=(gamess "triazolium.out" "" "triazolium.config")
    gamess_ref_single=0
    gamess_train_0=(gamess "h2ocu2+.energy.out" "" "h2ocu2+.energy.config")
    gamess_test_0=(gamess "exam29.out" "" "exam29.config")

    # 429
    mcf_ref_0=(mcf "inp.out mcf.out" "inp.in")
    mcf_train_0=(mcf "inp.out mcf.out" "inp.in")
    mcf_test_0=(mcf "inp.out mcf.out" "inp.in")

    # 433
    milc_ref_0=(milc "su3imp.out" "" "su3imp.in")
    milc_train_0=(milc "su3imp.out" "" "su3imp.in")
    milc_test_0=(milc "su3imp.out" "" "su3imp.in")

    # 434
    zeusmp_ref_0=(zeusmp "tsl000aa")
    zeusmp_train_0=(zeusmp "tsl000aa")
    zeusmp_test_0=(zeusmp "tsl000aa")

    # 435
    gromacs_ref_0=(gromacs "gromacs.out" "-silent -deffnm gromacs -nice 0")
    gromacs_train_0=(gromacs "gromacs.out" "-silent -deffnm gromacs -nice 0")
    gromacs_test_0=(gromacs "gromacs.out" "-silent -deffnm gromacs -nice 0")

    # 436
    cactusADM_ref_0=(cactusADM "benchADM.out" "benchADM.par")
    cactusADM_train_0=(cactusADM "benchADM.out" "benchADM.par")
    cactusADM_test_0=(cactusADM "benchADM.out" "benchADM.par")
    
    # 437
    leslie3d_ref_0=(leslie3d "leslie3d.out" "" "leslie3d.in")
    leslie3d_train_0=(leslie3d "leslie3d.out" "" "leslie3d.in")
    leslie3d_test_0=(leslie3d "leslie3d.out" "" "leslie3d.in")

    # 444
    namd_ref_0=(namd "namd.out" "--input namd.input --iterations 38 --output namd.out")
    namd_train_0=(namd "namd.out" "--input namd.input --iterations 1 --output named.out")
    namd_test_0=(namd "namd.out" "--input namd.input --iterations 1 --output named.out")

    # 445
    gobmk_ref_0=(gobmk "13x13.out" "--quiet --mode gtp" "13x13.tst")
    gobmk_ref_1=(gobmk "nngs.out" "--quiet --mode gtp" "nngs.tst")
    gobmk_ref_2=(gobmk "score2.out" "--quiet --mode gtp" "score2.tst")
    gobmk_ref_3=(gobmk "trevorc.out" "--quiet --mode gtp" "trevorc.tst")
    gobmk_ref_4=(gobmk "trevord.out" "--quiet --mode gtp" "trevord.tst")
    gobmk_ref_single=0
    gobmk_train_0=(gobmk "arb.out" "--quiet --mode gtp" "arb.tst")
    gobmk_train_1=(gobmk "arend.out" "--quiet --mode gtp" "arend.tst")
    gobmk_train_2=(gobmk "arion.out" "--quiet --mode gtp" "arion.tst")
    gobmk_train_3=(gobmk "atari_atari.out" "--quiet --mode gtp" "atari_atari.tst")
    gobmk_train_4=(gobmk "blunder.out" "--quiet --mode gtp" "blunder.tst")
    gobmk_train_5=(gobmk "buzco.out" "--quiet --mode gtp" "buzco.tst")
    gobmk_train_6=(gobmk "nicklas2.out" "--quiet --mode gtp" "nicklas2.tst")
    gobmk_train_7=(gobmk "nicklas4.out" "--quiet --mode gtp" "nicklas4.tst")
    gobmk_train_single=0
    gobmk_test_0=(gobmk "capture.out" "--quiet --mode gtp" "capture.tst")
    gobmk_test_1=(gobmk "connect.out" "--quiet --mode gtp" "connect.tst")
    gobmk_test_2=(gobmk "connect_rot.out" "--quiet --mode gtp" "connect_rot.tst")
    gobmk_test_3=(gobmk "connection.out" "--quiet --mode gtp" "connection.tst")
    gobmk_test_4=(gobmk "connection_rot.out" "--quiet --mode gtp" "connection_rot.tst")
    gobmk_test_5=(gobmk "cutstone.out" "--quiet --mode gtp" "cutstone.tst")
    gobmk_test_7=(gobmk "dniwog.out" "--quiet --mode gtp" "dniwog.tst")
    gobmk_test_single=0

    # 447
    dealII_ref_0=(dealII "grid-10.eps grid-16.eps grid-22.eps solution-12.gmv solution-18.gmv solution-9.gmv grid-11.eps grid-17.eps grid-23.eps solution-13.gmv solution-19.gmv grid-12.eps grid-18.eps grid-9.eps solution-14.gmv solution-20.gmv grid-13.eps grid-19.eps log solution-15.gmv solution-21.gmv grid-14.eps grid-20.eps solution-10.gmv solution-16.gmv solution-22.gmv grid-15.eps grid-21.eps solution-11.gmv solution-17.gmv solution-23.gmv" "23")
    dealII_train_0=(dealII "grid-10.eps grid-9.eps log solution-10.gmv solution-9.gmv" "10")
    dealII_test_0=(dealII "log" "8")

    # 450
    soplex_ref_0=(soplex "ref.out ref.stderr" "-m3500 ref.mps")
    soplex_ref_1=(soplex "pds-50.mps.out pds-50.mps.stderr" "-s1 -e -m45000 pds-50.mps")
    soplex_ref_single=0
    soplex_train_0=(soplex "train.out train.stderr" "-m1200 train.mps")
    soplex_train_1=(soplex "pds-20.mps.out pds-20.mps.stderr" "-s1 -e -m5000 pds-20.mps")
    soplex_train_single=0
    soplex_test_0=(soplex "test.out  test.stderr" "-m10000 test.mps")

    # 453
    povray_ref_0=(povray "SPEC-benchmark.log SPEC-benchmark.tga" "SPEC-benchmark-ref.ini")
    povray_train_0=(povray "SPEC-benchmark.log SPEC-benchmark.tga" "SPEC-benchmark-train.ini")
    povray_test_0=(povray "SPEC-benchmark.log SPEC-benchmark.tga" "SPEC-benchmark-test.ini")

    # 454
    calculix_ref_0=(calculix "SPECtestformatmodifier_z.txt hyperviscoplastic.dat" "-i hyperviscoplastic")
    calculix_train_0=(calculix "SPECtestformatmodifier_z.txt stairs.dat" "-i stairs")
    calculix_test_0=(calculix "SPECtestformatmodifier_z.txt beampic.dat" "-i beampic")

    # 456
    hmmer_ref_0=(hmmer "nph3.out" "nph3.hmm swiss41")
    hmmer_ref_1=(hmmer "retro.out" "--fxe 0 --mean 500 --num 500000 --sd 350 --seed 0 retro.hmm")
    hmmer_ref_single=0
    hmmer_train_0=(hmmer "leng100.out" "--fixed 0 --mean 425 --num 85000 --sd 300 --seed 0 leng100.hmm")
    hmmer_test_0=(hmmer "bombesin.out" "--fixed 0 --mean 325 --num 45000 --sd 200 --seed 0 bombesin.hmm")

    # 458
    sjeng_ref_0=(sjeng "ref.out" "ref.txt")
    sjeng_train_0=(sjeng "train.out" "train.txt")
    sjeng_test_0=(sjeng "test.out" "test.txt")

    # 459
    GemsFDTD_ref_0=(GemsFDTD "sphere_td.nft")
    GemsFDTD_train_0=(GemsFDTD "sphere_td.nft")
    GemsFDTD_test_0=(GemsFDTD "sphere_td.nft")

    # 462
    libquantum_ref_0=(libquantum "ref,out" "1397 8")
    libquantum_train_0=(libquantum "train.out" "143 25")
    libquantum_test_0=(libquantum "test.out" "33 5")

    # 464
    h264ref_ref_0=(h264ref "foreman_ref_baseline_encodelog.out foreman_ref_baseline_leakybucketparam.cfg" "-d foreman_ref_encoder_baseline.cfg") # broken now
    h264ref_ref_1=(h264ref "foreman_ref_main_encodelog.out foreman_ref_main_leakybucketparam.cfg" "-d foreman_ref_encoder_main.cfg")
    h264ref_ref_2=(h264ref "sss_main_encodelog.out sss_main_leakybucketparam.cfg" "-d sss_encoder_main.cfg")
    h264ref_ref_single=2
    h264ref_train_0=(h264ref "foreman_train_baseline_encodelog.out foreman_train_baseline_leakybucketparam.cfg" "-d foreman_train_encoder_baseline.cfg")
    h264ref_test_0=(h264ref "foreman_test_baseline_encodelog.out foreman_test_baseline_leakybucketparam.cfg" "-d foreman_test_encoder_baseline.cfg")
    # Some errors occurred while running this spec with RISCV's gem5 

    # 465
    tonto_ref_0=(tonto "stdout")
    tonto_train_0=(tonto "stdout")
    tonto_test_0=(tonto "stdout")
    # Some errors occurred while running this spec on real machine

    # 470
    lbm_ref_0=(lbm "lbm.out" "3000 reference.dat 0 0 100_100_130_ldc.of")
    lbm_train_0=(lbm "lbm.out" "300 reference.dat 0 0 100_100_130_cf_b.of")
    lbm_test_0=(lbm "lbm.out" "3000 reference.dat 0 1 100_100_130_cf_a.of")

    # 471
    omnetpp_ref_0=(omnetpp "omnetpp.log omnetpp.sca" "omnetpp.ini")
    omnetpp_train_0=(omnetpp "omnetpp.log omnetpp.sca" "omnetpp.ini")
    omnetpp_test_0=(omnetpp "omnetpp.log omnetpp.sca" "omnetpp.ini")

    # 473
    astar_ref_0=(astar "BigLakes2048.out" "BigLakes2048.cfg")
    astar_ref_1=(astar "rivers.out" "rivers.cfg")
    astar_ref_single=0
    astar_train_0=(astar "BigLakes1024.out" "BigLakes1024.cfg")
    astar_train_1=(astar "rivers1.out" "rivers1.cfg")
    astar_train_single=0
    astar_test_0=(astar "lake.out" "lake.cfg")

    # 481
    wrf_ref_0=(wrf "rsl.out.0000")
    wrf_train_0=(wrf "rsl.out.0000")
    wrf_test_0=(wrf "rsl.out.0000")

    # 482
    sphinx3_ref_0=(sphinx_livepretend "an4.log considered.out total_considered.out" "ctlfile . args.an4")
    sphinx3_train_0=(sphinx_livepretend "an4.log considered.out total_considered.out" "ctlfile . args.an4")
    sphinx3_test_0=(sphinx_livepretend "an4.log considered.out total_considered.out" "ctlfile . args.an4")

    # 483
    xalancbmk_ref_0=(Xalan "ref.out" "-v t5.xml xalanc.xsl")
    xalancbmk_train_0=(Xalan "train.out" "-v allbooks.xml xalanc.xsl")
    xalancbmk_test_0=(Xalan "test.out" "-v test.xml xalanc.xsl")

    # 999
    specrand_ref_0=(specrand "rand.234923.out" "1255432124 234923")
    specrand_train_0=(specrand "rand.3.out" "1 3")
    specrand_test_0=(specrand "rand.24239.out" "324342 24239")
}

################# settings for settingParser #################
setArgLevel(){
    # argument level
    argLevel=("Global" "CheckPoint" "Simpoint" "Smt" "Mem" "Ruby" "Cache" "L2Cache" "L3Cache" "SWCache" "CountAsInstruction")
    formatLevel=("" "" "--simpoint" "--smt" "" "--ruby" "--caches" "--l2cache" "--l3cache" "--swcache" "--at-instruction")

    # argument list
    argListGlobal=("cpuType" "cpuVoltage" "sysClock" "cpuClock" "fastForwardInsts" "warmupInsts" "maxInsts" "maxTime" "numCpus")
    argListCheckPoint=("loadCheckPointPos" "saveCheckPointPos" "checkPointDir")
    argListMem=("numDirs" "memType" "memChannels" "memRanks" "memSize")
    argListRuby=("rubyTopology" "rubyMeshRows" "rubyNetwork")
    argListCache=("cacheLineSize" "L1Dsize" "L1Dassoc" "L1Dprefetcher" "L1Isize" "L1Iassoc" "L1Iprefetcher")
    argListL2Cache=("numL2Caches" "L2size" "L2assoc" "L2prefetcher")
    argListL3Cache=("numL3Caches" "L3size" "L3assoc" "L3prefetcher")
    argListSWCache=("numCpuPerGroup")

    # format list for arguments
    formatListGlobal=("--cpu-type" "--sys-voltage" "--sys-clock" "--cpu-clock" "--fast-forward" "--warmup-insts" "--maxinsts" "--maxtime" "--num-cpus")
    formatListCheckPoint=("--checkpoint-restore" "--take-checkpoints" "--checkpoint-dir")
    formatListMem=("--num-dirs" "--mem-type" "--mem-channels" "--mem-ranks" "--mem-size")
    formatListRuby=("--topology" "--mesh-rows" "--network")
    formatListCache=("--cacheline_size" "--l1d_size" "--l1d_assoc" "--l1d-hwp-type" "--l1i_size" "--l1i_assoc" "--l1i-hwp-type")
    formatListL2Cache=("--num-l2caches" "--l2_size" "--l2_assoc" "--l2-hwp-type")
    formatListL3Cache=("--num-l3caches" "--l3_size" "--l3_assoc" "--l3-hwp-type")
    formatListSWCache=("--cpu_per_group")

    buildOption="CPU_MODELS=$cpuModel"
}

################# print path for output files #################
printOutputInfo(){
    if [ ${runSpec}x != 1x ]
    then
        debugDir="$tempDir"
        gem5Options=`echo $gem5Options | sed "s%DEBUGDIR%$debugDir%"`
    else
        debugDir="$tempDir/spec/$realTarget/m5out"
        gem5Options=`echo $gem5Options | sed "s%DEBUGDIR%$debugDir%"`
    fi
    
    if [ ${m5outDir}x = x -a ${runSpec}x = 1x ]
    then
        echo -e ">> Output files will be saved to \"\033[1;31m$tempDir/spec/$realTarget/m5out\033[0m\"!"
        m5outDir="$tempDir/spec/$realTarget/m5out"
    elif [ ${m5outDir}x = x ]
    then 
        echo -e ">> Output files will be saved to \"\033[1;31m$tempDir/m5out\033[0m\"!"
        m5outDir=$tempDir/m5out
    else 
        echo -e ">> Output files will be saved to \"\033[1;31m$m5outDir\033[0m\"!"
        m5outDir=$m5outDir
    fi

    if [ ${runSpec}x = 1x -a ${useDiff}x = Yesx ]
    then
        redirectOptions="--output=$m5outDir/STDOUTFILE"
        redirectOptions="$redirectOptions --errout=$m5outDir/STDERRFILE"
    fi

    if [ ${enableDebug}x = Yesx ]
    then
        if [ ${debugOutputDir}x = x -a ${runSpec}x = 1x ]
        then echo -e ">> Debug data will be saved to \"\033[1;31m$tempDir/spec/$realTarget/m5out\033[0m\"!"
        elif [ ${debugOutputDir}x = x ]
        then echo -e ">> Debug data will be saved to \"\033[1;31m$tempDir/m5out\033[0m\"!"
        else echo -e ">> Debug data will be saved to \"\033[1;31m$debugOutputDir\033[0m\"!"
        fi
    fi
}

################# build gem5.opt #################
buildGem5(){
    if [ ${needBuild}x = 1x ]
    then 
        if [ ! -f $gem5Dir/build/$ISA/gem5.$buildModel -o $forceNotBuild != Yes ]
        then 
            cd $gem5Dir
            scons -j$threads build/$ISA/gem5.$buildModel $buildOption
            if [ $? != 0 ]
            then exit
            fi
            if [ $USER != lee ]
            then chmod 777 -R $gem5Dir/build/ 2> /dev/null
            fi
            # This chmod should be enbaled on server!
        fi
    fi
}

################# running gem5 with generated options #################
runGem5(){
    mkdir -p $debugDir
   
    if [ ${m5outDir}x != x -a ! -d $m5outDir/ ]
    then mkdir -p $m5outDir
    else rm -rf $m5outDir/*
    fi
    
    if [ ${runSpec}x != 1x ]
    then
        startTime[0]=`date +%s`
        if [ ${gem5Only}x = 1x ]
        then bash -c "`echo $gem5Dir/build/$ISA/gem5.$buildModel $options`"
        else
            cd $root 
            gem5Options=`echo $gem5Options | sed "s/DEBUGFILE/debug\.log/"`
            bash -c "`echo $gem5Dir/build/$ISA/gem5.$buildModel $gem5Options $gem5Dir/configs/example/se.py $basicOptions $options`"
        fi
        endTime[0]=`date +%s`
    elif [ x$runMixSpec = x1 ]
    then
        suiteID=$specSuiteID
        gem5Options=`echo $gem5Options | sed "s/DEBUGFILE/debug_subtest_$suiteID\.log/"`
        redirectOptions=`echo $redirectOptions | sed -e "s/STDOUTFILE/stdout_subtest_$suiteID\.log/" -e "s/STDERRFILE/stderr_subtest_$suiteID\.log/"`
        echo -e "\033[1;31m ==================== Runing SubTest-$suiteID! ====================\033[0m"
        startTime[0]=`date +%s`
        bash -c "`echo $gem5Dir/build/$ISA/gem5.$buildModel $gem5Options $gem5Dir/configs/example/se.py $basicOptions $redirectOptions $mixSpecOptions`"
        endTime[0]=`date +%s`
        mv $m5outDir/stats.txt $m5outDir/stats_subtest_$suiteID.txt
    else
        suiteID=0
        gem5Options=`echo $gem5Options | sed "s/DEBUGFILE/debug_subtest_$suiteID\.log/"`
        redirectOptions=`echo $redirectOptions | sed -e "s/STDOUTFILE/stdout_subtest_$suiteID\.log/" -e "s/STDERRFILE/stderr_subtest_$suiteID\.log/"`
        while [ $suiteID -le $upperSuiteID ]
        do
            gem5Options=`echo $gem5Options | sed "s/subtest_$[suiteID - 1]/subtest_$suiteID/"`
            redirectOptions=`echo $redirectOptions | sed -e "s/subtest_$[suiteID - 1]/subtest_$suiteID/g"`
            if [ "${options[$suiteID]}x" = x ]
            then
                suiteID=$[suiteID + 1]
                continue
            fi
            echo -e "\033[1;31m      ==================== Runing SubTest-$suiteID! ====================\033[0m"
            startTime[$suiteID]=`date +%s`
            bash -c "`echo $gem5Dir/build/$ISA/gem5.$buildModel $gem5Options $gem5Dir/configs/example/se.py $basicOptions $redirectOptions ${options[$suiteID]}`"
            endTime[$suiteID]=`date +%s`
            mv $m5outDir/stats.txt $m5outDir/stats_subtest_$suiteID.txt
            suiteID=$[suiteID + 1]
        done
    fi
}

################# print Infomation for running time #################
printTimingInfo(){
    if [ $timingMode = No ]
    then return
    fi
    echo -e "\033[1;31m[Timing Report]\033[0m"
    echo -e "\033[1;34m    TestSet\tRunning_Time (Hour:Min:Second)\033[0m"
    totalTime=0
    suiteID=0
    while [ $suiteID -le $upperSuiteID ]
    do
        if [ ${startTime[$suiteID]}x != x ]
        then 
            if [ ${#suiteID} -lt 4 ]
            then echo -ne "\033[1;37m    ${suiteID}\t\t\033[0m"
            else echo -ne "\033[1;37m    ${suiteID}\t\033[0m"
            fi
            if [ ${endTime[$suiteID]}x != x ]
            then 
                realTime=$[${endTime[$suiteID]} - ${startTime[$suiteID]}]
                totalTime=$[totalTime + realTime]
                realTime="$[realTime / 3600]:$[realTime % 3600 / 60]:$[realTime % 60]"
                echo -e "\033[0;33m${realTime}\033[0m"
            else echo -e "\033[0;31mError\033[0m"
            fi
        fi
        suiteID=$[suiteID + 1]
    done
    totalTime="$[totalTime / 3600]:$[totalTime % 3600 / 60]:$[totalTime % 60]"
    echo -ne "\033[1;37m    Total\t\033[0m"
    echo -e "\033[1;33m${totalTime}\033[0m"
}

################# specdiff work #################
checkSpecDiff(){
    if [ ${runSpec}x != 1x ]
    then return
    fi
    if [ $useDiff = No ]
    then return
    elif [ $diffTool = "specdiff" ]
    then
        cd $specDir 
        source $specDir/shrc
        cd $tempDir/spec/$realTarget 
    fi
    echo -e "\033[1;31m[Diff Report (with $diffTool)]\033[0m"
    echo -e "\033[1;34m    TestSet\tDiff Status\033[0m"
    suiteID=0
    suiteFail=0
    while [ $suiteID -le $upperSuiteID ]
    do
        if [ "${diffFileList[$suiteID]}x" != x ]
        then
            badDiff=0
            if [ ${#suiteID} -lt 4 ]
            then echo -ne "\033[1;37m    ${suiteID}\t\t\033[0m"
            else echo -ne "\033[1;37m    ${suiteID}\t\033[0m"
            fi
            for file in ${diffFileList[$suiteID]}
            do
                srcFile="$specDir/benchspec/CPU2006/$fullTarget/data/$testSet/output/$file"
                if [ ! -f $file ]
                then
                    if [ x$runMixSpec = x1 ]
                    then
                        # stderr or stdout might be combined with each other
                        # we will skip them when running mixed spec program
                        continue
                    fi
                    if [[ $file =~ ^.*stderr$ ]]
                    then targetFile="$m5outDir/stderr_subtest_${suiteID}.log"
                    else targetFile="$m5outDir/stdout_subtest_${suiteID}.log"
                    fi
                else targetFile=$file
                fi
                case $diffTool in
                md5sum)
                    targetSum=(`md5sum $targetFile`)
                    srcSum=(`md5sum $srcFile`)
                    if [ ${targetSum[0]} != ${srcSum[0]} ]
                    then 
                        badDiff=1
                        echo "Good: $srcSum" > $m5outDir/${testSet}_${file}_${diffTool}.mis
                        echo "Real: $targetSum" >> $m5outDir/${testSet}_${file}_${diffTool}.mis
                    fi;;
                diff)
                    if [ "`diff $targetFile $srcFile`x" != x ]
                    then 
                        badDiff=1
                        diff $targetFile $srcFile > $m5outDir/${testSet}_${file}_${diffTool}.mis
                    fi;;
                specdiff)
                    if [ "`specdiff $targetFile $srcFile`" != "specdiff run completed" ]
                    then 
                        badDiff=1
                        specdiff $targetFile $srcFile > $m5outDir/${testSet}_${file}_${diffTool}.mis
                    fi;;
                *)
                    echo -e "\033[1;31mFatal Error: Unsupported diff tool \"$diffTool\"!\033[0m"
                    exit 1;;
                esac
                if [ $badDiff = 1 ]
                then suiteFail=1
                fi
            done
            if [ $badDiff = 0 ]
            then echo -e "\033[0;32mPass\033[0m"
            else echo -e "\033[0;31mFail\033[0m"
            fi
        fi
        suiteID=$[suiteID + 1]
    done
    echo -ne "\033[1;37m    Suites\t\033[0m"
    if [ $suiteFail = 1 ]
    then echo -e "\033[1;31mFail\033[0m"
    else echo -e "\033[1;32mPass\033[0m"
    fi
}

################# get available spec programs #################
findSpec(){
    # buildDir=`echo $buildDir | sed 's/x86/amd64/g'`
    if [ ! -d $specDir ]
    then
        echo "Warning: Directory not specified for Spec2000/2006!"
        noSpec=1
        return
    fi

    if [ -f /bin/lsnc ]
    then filelist=`lsnc $specDir/benchspec/CPU2006`
    else filelist=`ls $specDir/benchspec/CPU2006`
    fi

    for file in $filelist
    do
        if [ ! -d $specDir/benchspec/CPU2006/$file/run/$buildDir ]
        then continue
        fi
        errinfo=`cat $specDir/benchspec/CPU2006/$file/run/$buildDir/make.err | grep "error:"`
        if [ "${errinfo}x" = x ]
        then 
            delFlag=0
            for delete in $bad_spec
            do
                if [ $file = $delete -a $ISA = RISCV ]
                then
                    delFlag=1
                    break
                fi
            done
            if [ $delFlag != 1 ]
            then testlist="$testlist $file"
            fi
        fi
    done
    testlist=($testlist)
}

################# help infomation #################
printHelpInfo(){
    echo "Usage: se [OPTION]" 
    echo "    -h [-h <target file> <more options>]"
    echo "        Use -h to see help info or use more options for gem5.opt and config file!" 
    echo "        If <more options> exists, it will be directly passed to the file specified" 
    echo "        by <target file>; Otherwise, help information will be showed!"
    echo
    echo "        -->Target file options:"
    echo "           <gem5> Show help information for gem5.opt"
    echo "           <se> Show help information for se.py"
    echo 
    echo "    -l [-l] Use -l to list valid spec programs!"
    echo "    -p [-p <spec program names/numbers>]  If the spec program is not given, then"
    echo "        it will be chosen randomly! You can also run multiple specprogram with"
    echo "        like \"spec1 spec2\"!"
    echo "    -mp [-mp <programs list>] Running multiple programs! Program list should be"
    echo "        like \"prog1=arguments prog2=arguments\"!"
}

################# parse settings #################
settingParser(){
    ################# parse dir args ##################
    if [ ${GEM5_ROOT}x != x ]
    then
        echo "Warning: Environment variable GEM5_ROOT is set, use env-variable"
        echo "         instead of variable in this script!"
        gem5Dir=$GEM5_ROOT
    fi
    if [ ${SPEC_ROOT}x != x ]
    then
        echo "Warning: Environment variable SPEC_ROOT is set, use env-variable"
        echo "         instead of variable in this script!"
        specDir=$SPEC_ROOT
    fi
    ################# parse debug args ##################
    if [ ${enableDebug}x = Yesx ]
    then 
        if [ "${debugFlags}x" != x ]
        then gem5Options="$gem5Options --debug-flags=$debugFlags"
        fi
        if [ ${debugOutputDir}x = x ]
        then gem5Options="$gem5Options --debug-file=DEBUGDIR/DEBUGFILE"
        else
            if [ -d ${debugOutputDir} ]
            then gem5Options="$gem5Options --debug-file=$debugOutputDir/DEBUGFILE"
            else 
                echo "Error: No such directory \"$debugOutputDir\"!" 
                exit 1
            fi
        fi
        if [ ${debugStartTick}x != x ]
        then gem5Options="$gem5Options --debug-start=$debugStartTick"
        fi
        if [ ${debugEndTick}x != x ]
        then basicOptions="$basicOptions -m $debugEndTick"
        fi
    fi

    if [ ${m5outDir}x != x ]
    then
        if [ -f $m5outDir -a ! -d $m5outDir ]
        then 
            echo "Can not redirect output to $m5outDir: File exists!"
            exit
        else gem5Options="$gem5Options --outdir=$m5outDir"
        fi
    fi

    ################# parse other args ##################
    levelIdx=0
    for level in ${argLevel[*]}
    do
        #echo $level `eval echo -e '$'"enable$level"`
        if [ `eval echo -e '$'"enable$level"` = Yes ]
        then
            basicOptions="$basicOptions ${formatLevel[$levelIdx]}"
            argIdx=0
            for argName in `eval echo -e '$'"{argList$level[*]}"`
            do
                realArg=`eval echo -e '$'"$argName"`
                if [ ${realArg}x != x ]
                then basicOptions="$basicOptions `eval echo -e '$'"{formatList$level[$argIdx]}"`=$realArg"
                fi
                argIdx=$[argIdx + 1]
            done
        fi
        levelIdx=$[levelIdx + 1]
    done
}

################# parse script args #################
argParser(){
    ################# help infomation #################
    if [ "${arguments[1]}x" = -hx -o "${arguments[1]}x" = x ] && [ "${arguments[2]}x" = x ]
    then printHelpInfo;exit
    fi

    case "${arguments[1]}x" in
    ################# run multiple programs #################
    "-mpx")
        if [ ${gem5Dir}x = x ]
        then 
            echo "Error: Gem5 root directory not set!"
            exit 1
        fi
        progIdx=0
        while [ "${arguments[$[progIdx + 2]]}x" != x ]
        do
            prog=(`echo ${arguments[$[progIdx + 2]]} | sed 's/=/ /'`)
            if [ -x ${prog[0]} -a ! -d ${prog[0]} ]
            then 
                progList[$progIdx]="${prog[0]}@%"
                argList[$progIdx]="${prog[*]:1:$[${#prog[*]} - 1]}@%"
            else 
                echo "${prog[0]}: No such file or this file is not excutable!"
                exit
            fi
            progIdx=$[progIdx + 1]
        done
        if [ $progIdx = 0 ]
        then
            echo "You must provide at least one program to run!"
            exit
        else 
            progList=`echo "${progList[*]} " | sed 's/@% /;/g'`
            argList=`echo "${argList[*]} " | sed 's/@% /;/g'`
            progList=${progList:0:$[${#progList} - 1]}
            argList=${argList:0:$[${#argList} - 1]}
        fi
        if [ "${argList}x" != x ]
        then options="-c '$progList' -o '$argList'"
        else options="-c '$progList'"
        fi
        needBuild=1;;
    
    ################# run with given args #################
    "-hx")
        if [ ${gem5Dir}x = x ]
        then 
            echo "Error: Gem5 root directory not set!"
            exit 1
        fi
        case "${arguments[2]}x" in
        gem5x)
            if [ ! -f $gem5Dir/build/$ISA/gem5.$buildModel ]
            then needBuild=1
            fi
            gem5Only=1
            if [ "${arguments[3]}x" = x ]
            then options="-h"
            else options=${arguments[*]:3:$[${#arguments[*]} - 3]}
            fi;;
        sex)
            if [ ! -f $gem5Dir/build/$ISA/gem5.$buildModel ]
            then needBuild=1
            fi
            if [ "${arguments[3]}x" = x ]
            then options="-h"
            else
                argIdx=3
                while [ "${arguments[$argIdx]}x" != x ]
                do 
                    if [ `echo ${arguments[$argIdx]} | sed 's/;/ /g' | wc -w` -gt 1 ]
                    then options="$options '${arguments[$argIdx]}'"
                    else options="$options ${arguments[$argIdx]}"
                    fi
                    argIdx=$[argIdx + 1]
                done
            
                if [ "`echo $options | grep "\-c\|\-\-cmd"`"x != x ]
                then needBuild=1
                fi
            fi;;
        *)
            echo "Bad argument \"${arguments[2]}\"! Use -h for help!"
            exit;;
        esac;;
    
    ################# list available spec programs #################
    "-lx")
        if [ ${noSpec}x = 1x ]
        then
            echo "Error: could not locate spec dir \"$specDir\"!"
            exit 1
        fi
        if [ "${#testlist[*]}" = 0 ]
        then echo "No available spec programs for $ISA with optLevel \"$optLevel\"!"
        fi
        for item in ${testlist[*]}
        do echo $item
        done
        exit;;

    ################# select available spec programs #################
    "-px")
        if [ ${gem5Dir}x = x ]
        then 
            echo "Error: Gem5 root directory not set!"
            exit 1
        fi
        if [ ${noSpec}x = 1x ]
        then
            echo "Error: could not locate spec dir \"$specDir\"!"
            exit 1
        fi
        if [ ${#testlist[*]} = 0 ]
        then
            echo "No available spec programs for $ISA!"
            exit
        fi
        
        if [ "${arguments[2]}x" != x ]
        then
            index=2
            while [ ${arguments[$index]}x != x ]
            do
                specArg=${arguments[$index]}
                unset target
                argIdx=0
                while [ $argIdx -lt ${#testlist[*]} ]
                do
                    name=(`echo ${testlist[$argIdx]} | sed 's/\./ /g'`)
                    if [ "$specArg" = ${name[0]} -o "$specArg" = ${name[1]} -o \
                        "$specArg" = ${testlist[$i]} ]
                    then 
                        target=(${name[*]})
                        break
                    fi
                    argIdx=$[argIdx + 1]
                done
                if [ ${target}x = x ]
                then 
                    echo -n "\"$specArg\": Bad spec program number/name"
                    echo " or the spec program is not valid!"
                    echo "Use -l to see the available spec program list!"
                    exit
                fi
                fullTargets="$fullTargets ${target[0]}.${target[1]}"
                targets="$targets\n${target[1]}"
                targetNums="$targetNums ${target[0]}"
                index=$[index + 1]
            done
            if [ $index = 3 ]
            then
                fullTargets="${target[0]}.${target[1]}"
                targets=${target[1]}
            else
                if [ x$runSpecSuites = xYes ]
                then
                    echo -n "Warning: Can not run multi-programmed spec "
                    echo "with runSpecSuites on. This option will be disabled."
                    runSpecSuites=No
                fi
                targets=`echo -e $targets | sort`
                runMixSpec=1
                while [ "x$targetNums" != x ]
                do
                    minNum=9999
                    for number in $targetNums
                    do
                        if [ $number -lt $minNum ]
                        then minNum=$number
                        fi
                    done
                    targetNums=`echo $targetNums | sed "s/$minNum//"`
                    mixSpecName="${mixSpecName}_$minNum"
                done
                mixSpecName=${mixSpecName:1:$[${#mixSpecName} - 1]}
            fi
        else
            argIdx=$[$RANDOM % ${#testlist[*]}]
            target=(`echo ${testlist[$argIdx]} | sed 's/\./ /g'`)    
            fullTargets="${target[0]}.${target[1]}"
            targets=${target[1]}
        fi
        runSpec=1
        needBuild=1;;
    *) 
        echo "Bad argument \"${arguments[1]}\"! Use -h for help!"
        exit;;
    esac
}

################# copy and link files needed for spec #################
buildSpecTemp(){
    if [ ${runSpec}x != 1x ]
    then return 
    fi
    
    echo -n ">> Files used for spec will be saved to"
    echo -e " \"\033[1;31m$tempDir/spec\033[0m\"!"
    
    runDir=`echo $runDir | sed "s/TESTSET/$testSet/g"`
    if [ x$runMixSpec = x1 ]
    then
        mkdir -p $tempDir/spec/$mixSpecName
        rm -rf $tempDir/spec/$mixSpecName/*
    else
        mkdir -p $tempDir/spec/$fullTargets
        rm -rf $tempDir/spec/$fullTargets/*
    fi
    
    unset processedTarget
    for fullTarget in $fullTargets
    do
        if [ ! -d $specDir/benchspec/CPU2006/$fullTarget/run/$runDir ]
        then
            echo -n "RUN_DIR(\"$runDir\") not found in dir "
            echo "\"$specDir/benchspec/CPU2006/$fullTarget/run\"!"
            exit
        fi

        target=`echo $fullTarget | sed 's/\./ /' | awk '{print $2}'`
        if [ "x`echo $processedTarget | grep $fullTarget`" != x ]
        then continue
        fi

        if [ x$runMixSpec = x1 ]
        then realTarget=$mixSpecName
        else realTarget=$fullTarget
        fi

        file_list="$specDir/benchspec/CPU2006/$fullTarget/run/$runDir/*"

        for file in $file_list
        do
            if [ -f $tempDir/spec/$realTarget/`basename $file` ]
            then
                echo -n "Warning: File `basename $file` will be overwritten."
                echo " Please makesure this will cause no problem to running."
            fi
            cp -r $file $tempDir/spec/$realTarget/`basename $file`
            if [ $? != 0 ]
            then
                echo "Error occurred while trying to copy file $file"
                exit
            fi
        done

        temp=`eval echo -e '$'"{${target}_${testSet}_0[0]}"`
        cp -r  $specDir/benchspec/CPU2006/$fullTarget/run/$buildDir/$temp \
                $tempDir/spec/$realTarget/$temp
   
        processedTarget="$processedTarget $fullTarget"
    done
    
    for file in $specDiffFileList
    do rm -rf $file
    done
    
    cd $tempDir/spec/$realTarget
}

################# generate options for spec #################
buildSpecOptions(){
    if [ ${runSpec}x != 1x ]
    then return
    fi
    
    if [ x$runMixSpec = x1 ]
    then
        echo -e "\033[1;31m ==================== Running Mixed Spec ! ====================\033[0m"
        echo -e "-- SpecList: \033[1;31m $fullTargets \033[0m"
        for target in $targets
        do
            single=`eval echo -e '$'"${target}_${testSet}_single"`
            if [ ${single}x != x -a $runSpecSuites = No ]
            then suiteID=$single
            else suiteID=0
            fi
            
            specSuiteID="${specSuiteID}_${suiteID}"
            specVarName="${target}_${testSet}_${suiteID}"
            specExecList="$specExecList;./`eval echo -e '$'"{$specVarName[0]}"`"
            specArgList="$specArgList;`eval echo -e '$'"{$specVarName[2]}"`"
            specInputList="$specINputList;`eval echo -e '$'"{$specVarName[3]}"`"
            specDiffFileList="$specDiffFileList `eval echo -e '$'"{$specVarName[1]}"`"
        done
        specSuiteID=${specSuiteID:1:$[${#specSuiteID} - 1]}
        specExecList=${specExecList:1:$[${#specExecList} - 1]}
        specArgList=${specArgList:1:$[${#specArgList} - 1]}
        specInputList=${specInputList:1:$[${#specInputList} - 1]}
        mixSpecOptions="-c '$specExecList' -o '$specArgList' -i '$specInputList'"
    else
        echo -e "\033[1;31m ==================== Running Spec $fullTargets! ====================\033[0m"
        target=$targets
        single=`eval echo -e '$'"${target}_${testSet}_single"`
        if [ ${single}x != x -a $runSpecSuites = No ]
        then suiteID=$single
        else suiteID=0
        fi
        
        while [ "`eval echo -e '$'"{${target}_${testSet}_${suiteID}[0]}"`x" != x ]
        do
            specVarName="${target}_${testSet}_${suiteID}"
            options[$suiteID]="-c ./`eval echo -e '$'"{$specVarName[0]}"`"
            if [ "`eval echo -e '$'"{$specVarName[2]}"`x" != x ]
            then
                specArg=`eval echo -e '$'"{$specVarName[2]}"`
                options[$suiteID]="${options[$suiteID]} -o '$specArg'"
            fi
            diffFileList[$suiteID]=`eval echo -e '$'"{$specVarName[1]}"`
            if [ $runSpecSuites = No ]
            then break
            fi
            specDiffFileList="$specDiffFileList ${diffFileList[$suiteID]}"
            suiteID=$[suiteID + 1]
        done
    fi
}

argIdx=1
arguments[0]="$0"
while [ "${1}x" != x ]
do
    arguments[$argIdx]="$1"
    shift 1
    argIdx=$[argIdx + 1]
done

setScript
setGem5
setArgLevel
setSpec
findSpec
argParser
settingParser
buildGem5
set -e
buildSpecOptions
buildSpecTemp
printOutputInfo
runGem5
printTimingInfo
set +e
checkSpecDiff
